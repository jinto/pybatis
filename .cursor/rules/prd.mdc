---
description:
globs:
alwaysApply: true
---
📄 pyBatis – FastAPI를 위한 MyBatis 스타일의 SQL 매퍼

1. 개요
pyBatis는 FastAPI 백엔드 개발자를 위한 오픈소스 SQL 매퍼 라이브러리입니다. Java의 MyBatis에서 영감을 받아, XML 없이도 SQL을 명시적으로 작성하고, 비즈니스 로직과 분리하여 관리할 수 있도록 설계되었습니다. Pythonic한 방식으로 SQL을 정의하고, FastAPI의 의존성 주입 시스템과 통합되며, 비동기 트랜잭션 처리와 동적 SQL 생성을 지원합니다.

2. 목표
SQL과 비즈니스 로직의 분리: SQL 문을 외부 파일이나 데코레이터를 통해 정의하여 코드의 가독성과 유지보수성을 향상시킵니다.

Pythonic한 구성: XML 대신 데코레이터, 함수 주석, .sql 파일 등을 활용하여 설정합니다.

Pydantic 모델 매핑: SQL 쿼리 결과를 Pydantic 모델로 매핑하여 데이터 검증과 직렬화를 용이하게 합니다.

FastAPI 통합: FastAPI의 Depends를 활용한 의존성 주입을 지원하여, 데이터베이스 세션이나 리포지토리 인스턴스를 라우트 핸들러에 주입합니다.

동적 SQL 지원: 조건부 블록, 반복문 등을 활용한 동적 SQL 생성을 지원합니다.

다양한 DB 드라이버와의 호환성: asyncpg, psycopg2, aiomysql 등과 같은 드라이버와의 통합을 지원합니다.

비동기 트랜잭션 처리: async/await를 활용한 클린한 트랜잭션 처리를 제공합니다.

테스트 용이성: 모킹 및 쿼리 로깅 기능을 통해 테스트를 용이하게 합니다.

개발자 경험 향상: 명확한 SQL 관리와 직관적인 API를 통해 개발자의 생산성을 높입니다.

3. 비목표
ORM 기능 제공: 이 라이브러리는 ORM이 아니며, 객체의 상태를 추적하거나 자동으로 SQL을 생성하지 않습니다.

XML 기반 설정: XML을 사용한 설정을 지원하지 않습니다.

특정 데이터베이스에 종속되지 않음: 특정 DBMS에 종속되지 않으며, 다양한 데이터베이스와의 호환성을 유지합니다.

프론트엔드 기능 제공: 관리 UI나 프론트엔드 컴포넌트를 제공하지 않습니다.

4. 기능 요구사항
4.1 SQL 정의 및 실행
외부 SQL 파일 지원: .sql 파일에 SQL 문을 정의하고, 이를 로드하여 실행할 수 있습니다.

데코레이터를 통한 SQL 정의: Python 함수에 데코레이터를 사용하여 SQL 문을 직접 정의할 수 있습니다.

파라미터 바인딩: SQL 문에 안전하게 파라미터를 바인딩하여 SQL 인젝션을 방지합니다.

4.2 결과 매핑
Pydantic 모델 매핑: 쿼리 결과를 Pydantic 모델로 매핑하여 데이터 검증과 직렬화를 용이하게 합니다.

ORM 모드 지원: Pydantic의 from_orm() 메서드를 활용하여 SQLAlchemy 모델 인스턴스를 Pydantic 모델로 변환할 수 있습니다.
GitHub

4.3 FastAPI 통합
의존성 주입: FastAPI의 Depends를 활용하여 데이터베이스 세션이나 리포지토리를 라우트 핸들러에 주입합니다.

비동기 지원: FastAPI의 비동기 라우트와 호환되도록 async/await를 지원합니다.

4.4 동적 SQL 지원
조건부 블록: 입력 파라미터에 따라 SQL 문에 조건부 블록을 포함시킬 수 있습니다.

반복문 지원: 리스트 파라미터를 활용하여 IN 절 등을 동적으로 생성할 수 있습니다.

4.5 트랜잭션 처리
컨텍스트 매니저: async with 문을 사용하여 트랜잭션을 관리할 수 있습니다.

자동 커밋/롤백: 예외 발생 시 자동으로 롤백되며, 정상 실행 시 커밋됩니다.

4.6 테스트 및 로깅
모킹 지원: 의존성 주입을 통해 테스트 시 데이터베이스 세션이나 리포지토리를 모킹할 수 있습니다.

쿼리 로깅: 개발 모드에서 실행되는 SQL 문과 파라미터를 로깅하여 디버깅을 용이하게 합니다.

5. 비기능 요구사항
성능: 비동기 I/O를 활용하여 높은 성능을 유지합니다.

보안: 파라미터 바인딩을 통해 SQL 인젝션을 방지합니다.

호환성: Python 3.8 이상을 지원하며, 주요 운영체제에서 동작합니다.

유지보수성: 모듈화된 구조와 명확한 문서를 통해 유지보수를 용이하게 합니다.

문서화: 사용자 가이드, 예제 코드, API 문서를 제공합니다.

6. 사용자 시나리오
FastAPI 개발자: SQL 문을 .sql 파일에 정의하고, 라우트 핸들러에서 이를 호출하여 비즈니스 로직과 SQL을 분리하고자 합니다.

데이터베이스 관리자: 복잡한 SQL 쿼리를 명시적으로 관리하고, 성능 최적화를 위해 직접 SQL을 작성하고자 합니다.

테스터: 의존성 주입을 활용하여 데이터베이스와의 의존성을 모킹하고, 유닛 테스트를 수행하고자 합니다.

7. 아키텍처 개요
SQL 로더: 외부 .sql 파일이나 데코레이터를 통해 SQL 문을 로드합니다.

쿼리 실행기: 파라미터 바인딩을 수행하고, SQL 문을 실행하여 결과를 반환합니다.

결과 매퍼: 쿼리 결과를 Pydantic 모델로 매핑합니다.

의존성 주입 관리자: FastAPI의 Depends를 활용하여 데이터베이스 세션이나 리포지토리를 주입합니다.

트랜잭션 관리자: async with 문을 활용하여 트랜잭션을 관리합니다.

로거: 개발 모드에서 실행되는 SQL 문과 파라미터를 로깅합니다.

8. 향후 고려사항
템플릿 엔진 통합: Jinja2와 같은 템플릿 엔진을 활용하여 SQL 문을 동적으로 생성하는 기능을 고려합니다.

마이그레이션 도구 통합: Alembic과 같은 마이그레이션 도구와의 통합을 통해 스키마 관리를 용이하게 합니다.

GUI 도구 개발: SQL 문을 시각적으로 관리할 수 있는 GUI 도구의 개발을 고려합니다.

커뮤니티 플러그인 지원: 커뮤니티에서 개발한 플러그인을 쉽게 통합할 수 있는 구조를 마련합니다.

